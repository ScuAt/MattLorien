//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ControllerData/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""c62a0f12-352d-4199-8c46-863b3313dbe8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c541585a-a3e6-4b01-9c55-e6a195a1d1de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""075eeee0-f0cb-40b8-9b05-023f15f78e04"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3be790e0-e08e-41fb-befb-cec3f036db45"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eab5bda-586c-46d8-954a-c765dd59886a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DefenderActions"",
            ""id"": ""09e6a52f-6f58-4000-8671-58a0c9859f4a"",
            ""actions"": [
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""9d870c0c-116d-496e-a9be-c8867d0d5493"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f993701-db0c-40da-b66f-a517c35cc381"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AttackerActions"",
            ""id"": ""70d127af-c55e-4110-854e-a7fdbe42d8e2"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""8a62cd0b-92ad-4c96-9139-cb3d50705cf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8fc3d22e-445e-4f98-9d95-ede6ba0c4c26"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Move = m_PlayerActions.FindAction("Move", throwIfNotFound: true);
        m_PlayerActions_Rotate = m_PlayerActions.FindAction("Rotate", throwIfNotFound: true);
        // DefenderActions
        m_DefenderActions = asset.FindActionMap("DefenderActions", throwIfNotFound: true);
        m_DefenderActions_Block = m_DefenderActions.FindAction("Block", throwIfNotFound: true);
        // AttackerActions
        m_AttackerActions = asset.FindActionMap("AttackerActions", throwIfNotFound: true);
        m_AttackerActions_Attack = m_AttackerActions.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_Move;
    private readonly InputAction m_PlayerActions_Rotate;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerActions_Move;
        public InputAction @Rotate => m_Wrapper.m_PlayerActions_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // DefenderActions
    private readonly InputActionMap m_DefenderActions;
    private IDefenderActionsActions m_DefenderActionsActionsCallbackInterface;
    private readonly InputAction m_DefenderActions_Block;
    public struct DefenderActionsActions
    {
        private @PlayerControls m_Wrapper;
        public DefenderActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Block => m_Wrapper.m_DefenderActions_Block;
        public InputActionMap Get() { return m_Wrapper.m_DefenderActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefenderActionsActions set) { return set.Get(); }
        public void SetCallbacks(IDefenderActionsActions instance)
        {
            if (m_Wrapper.m_DefenderActionsActionsCallbackInterface != null)
            {
                @Block.started -= m_Wrapper.m_DefenderActionsActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_DefenderActionsActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_DefenderActionsActionsCallbackInterface.OnBlock;
            }
            m_Wrapper.m_DefenderActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
            }
        }
    }
    public DefenderActionsActions @DefenderActions => new DefenderActionsActions(this);

    // AttackerActions
    private readonly InputActionMap m_AttackerActions;
    private IAttackerActionsActions m_AttackerActionsActionsCallbackInterface;
    private readonly InputAction m_AttackerActions_Attack;
    public struct AttackerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public AttackerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_AttackerActions_Attack;
        public InputActionMap Get() { return m_Wrapper.m_AttackerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IAttackerActionsActions instance)
        {
            if (m_Wrapper.m_AttackerActionsActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_AttackerActionsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_AttackerActionsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_AttackerActionsActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_AttackerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public AttackerActionsActions @AttackerActions => new AttackerActionsActions(this);
    public interface IPlayerActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IDefenderActionsActions
    {
        void OnBlock(InputAction.CallbackContext context);
    }
    public interface IAttackerActionsActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
}
