//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ControllerData/PlayerOneControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerOneControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerOneControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerOneControls"",
    ""maps"": [
        {
            ""name"": ""PlayerOneActions"",
            ""id"": ""34e05f80-9aa0-47f7-8d56-6c49ec4ebe31"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""29a6bef0-d474-41c0-9a14-15c127949002"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""da083441-b3f4-4105-a843-357aba4d54c9"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1767f7eb-98e1-42c0-af21-c11d1e81dcc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""07182c40-c5aa-42fa-aba0-c31652ad48cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""9c29009a-029e-4da3-a85f-2b901edd5d81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Options"",
                    ""type"": ""Button"",
                    ""id"": ""33428728-f1e8-4a83-9693-086ba49579be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9865d641-e4db-476d-902c-fd3edc46dd4c"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06d49bee-18a3-4d7e-8bf3-4a94cfe7790d"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59e8a127-0c95-42ac-8730-cb24178afc8d"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c373760b-b5f8-43de-8bca-7cfa3bedb606"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f589e37-081e-474a-862a-3fcea5109c59"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42649b9c-3e3b-42be-aca0-02c43e0925ac"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46de4de9-9baf-4337-9b2a-71bbbcb7c934"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOneActions
        m_PlayerOneActions = asset.FindActionMap("PlayerOneActions", throwIfNotFound: true);
        m_PlayerOneActions_Move = m_PlayerOneActions.FindAction("Move", throwIfNotFound: true);
        m_PlayerOneActions_Rotate = m_PlayerOneActions.FindAction("Rotate", throwIfNotFound: true);
        m_PlayerOneActions_Attack = m_PlayerOneActions.FindAction("Attack", throwIfNotFound: true);
        m_PlayerOneActions_Interact = m_PlayerOneActions.FindAction("Interact", throwIfNotFound: true);
        m_PlayerOneActions_SpecialAttack = m_PlayerOneActions.FindAction("SpecialAttack", throwIfNotFound: true);
        m_PlayerOneActions_Options = m_PlayerOneActions.FindAction("Options", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOneActions
    private readonly InputActionMap m_PlayerOneActions;
    private IPlayerOneActionsActions m_PlayerOneActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerOneActions_Move;
    private readonly InputAction m_PlayerOneActions_Rotate;
    private readonly InputAction m_PlayerOneActions_Attack;
    private readonly InputAction m_PlayerOneActions_Interact;
    private readonly InputAction m_PlayerOneActions_SpecialAttack;
    private readonly InputAction m_PlayerOneActions_Options;
    public struct PlayerOneActionsActions
    {
        private @PlayerOneControls m_Wrapper;
        public PlayerOneActionsActions(@PlayerOneControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerOneActions_Move;
        public InputAction @Rotate => m_Wrapper.m_PlayerOneActions_Rotate;
        public InputAction @Attack => m_Wrapper.m_PlayerOneActions_Attack;
        public InputAction @Interact => m_Wrapper.m_PlayerOneActions_Interact;
        public InputAction @SpecialAttack => m_Wrapper.m_PlayerOneActions_SpecialAttack;
        public InputAction @Options => m_Wrapper.m_PlayerOneActions_Options;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOneActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOneActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerOneActionsActions instance)
        {
            if (m_Wrapper.m_PlayerOneActionsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnRotate;
                @Attack.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnAttack;
                @Interact.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnInteract;
                @SpecialAttack.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnSpecialAttack;
                @Options.started -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnOptions;
                @Options.performed -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnOptions;
                @Options.canceled -= m_Wrapper.m_PlayerOneActionsActionsCallbackInterface.OnOptions;
            }
            m_Wrapper.m_PlayerOneActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @SpecialAttack.started += instance.OnSpecialAttack;
                @SpecialAttack.performed += instance.OnSpecialAttack;
                @SpecialAttack.canceled += instance.OnSpecialAttack;
                @Options.started += instance.OnOptions;
                @Options.performed += instance.OnOptions;
                @Options.canceled += instance.OnOptions;
            }
        }
    }
    public PlayerOneActionsActions @PlayerOneActions => new PlayerOneActionsActions(this);
    public interface IPlayerOneActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
        void OnOptions(InputAction.CallbackContext context);
    }
}
